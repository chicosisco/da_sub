
DA2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068b  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main()

{
	int over_flow=0; //over-flow counter
	
	DDRB |= (1<<DDB4); // PB4 as output
  80:	24 9a       	sbi	0x04, 4	; 4
	TCCR0A = 0; // normal operation.
  82:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00;   //start timer/counter
  84:	16 bc       	out	0x26, r1	; 38
	
	TCCR0B |=(1<<CS02);  // setting prescaler to 256
  86:	85 b5       	in	r24, 0x25	; 37
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	85 bd       	out	0x25, r24	; 37


int main()

{
	int over_flow=0; //over-flow counter
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
    {
	  
		//wait for the overflow event
		while ((TIFR0 & 0X01)==0);
		TCNT0=0X00;  //resetting counter to zero
		TIFR0=0X01;  // reset the overflow flag
  90:	21 e0       	ldi	r18, 0x01	; 1
		// if overflow is equal to 71 cycles turn on LED on PB4	
		if (over_flow>=71){
		PORTB = (0<<DDB4);
		}
		else 
		PORTB = (1<<DDB4);  // or turn off LED on PB4
  92:	30 e1       	ldi	r19, 0x10	; 16

    while (1) 
    {
	  
		//wait for the overflow event
		while ((TIFR0 & 0X01)==0);
  94:	a8 9b       	sbis	0x15, 0	; 21
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x14>
		TCNT0=0X00;  //resetting counter to zero
  98:	16 bc       	out	0x26, r1	; 38
		TIFR0=0X01;  // reset the overflow flag
  9a:	25 bb       	out	0x15, r18	; 21
		over_flow++;  //increasing overflow counter
  9c:	01 96       	adiw	r24, 0x01	; 1
		
		// if overflow is equal to 71 cycles turn on LED on PB4	
		if (over_flow>=71){
  9e:	87 34       	cpi	r24, 0x47	; 71
  a0:	91 05       	cpc	r25, r1
  a2:	14 f0       	brlt	.+4      	; 0xa8 <main+0x28>
		PORTB = (0<<DDB4);
  a4:	15 b8       	out	0x05, r1	; 5
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x2a>
		}
		else 
		PORTB = (1<<DDB4);  // or turn off LED on PB4
  a8:	35 b9       	out	0x05, r19	; 5
		
		if (over_flow==177) {
  aa:	81 3b       	cpi	r24, 0xB1	; 177
  ac:	91 05       	cpc	r25, r1
  ae:	91 f7       	brne	.-28     	; 0x94 <main+0x14>
			over_flow=0; //resetting overflow counter
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	ef cf       	rjmp	.-34     	; 0x94 <main+0x14>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
