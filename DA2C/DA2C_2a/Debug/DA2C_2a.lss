
DA2C_2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a3  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023c  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int over_flow=0;

int main()
{
	
    DDRB |=(1<<DDB4);  // setting PB1 as output
  90:	24 9a       	sbi	0x04, 4	; 4
	TIMSK0 |= (1<<TOIE0);
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	TCNT0 = 0; // setting initial value for counter
  9c:	16 bc       	out	0x26, r1	; 38
	sei();     // enable interrupts
  9e:	78 94       	sei
	TCCR0B |=(1<<CS02);  // setting prescaler to 256
  a0:	85 b5       	in	r24, 0x25	; 37
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	85 bd       	out	0x25, r24	; 37
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x16>

000000a8 <__vector_16>:
		//main loop
    }
}
	
	ISR(TIMER0_OVF_vect) // timer_0 overflow interrupt
	{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
		while (!(TIFR0 & 0X01)==0);
  b6:	a8 99       	sbic	0x15, 0	; 21
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <__vector_16+0xe>
		TCNT0=0X00;  //resetting counter to zero
  ba:	16 bc       	out	0x26, r1	; 38
		TIFR0=0X01;  // reset the overflow flag
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	85 bb       	out	0x15, r24	; 21
		over_flow++;  //increasing overflow counter
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		// if overflow is equal to 71 cycles turn on LED on PB4	
		if (over_flow>=71){
  d2:	87 34       	cpi	r24, 0x47	; 71
  d4:	91 05       	cpc	r25, r1
  d6:	14 f0       	brlt	.+4      	; 0xdc <__vector_16+0x34>
		PORTB = (0<<DDB4);
  d8:	15 b8       	out	0x05, r1	; 5
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__vector_16+0x38>
		}
		else 
		PORTB = (1<<DDB4);  // or turn off LED on PB4
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	85 b9       	out	0x05, r24	; 5
		
		if (over_flow==178) {
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e8:	82 3b       	cpi	r24, 0xB2	; 178
  ea:	91 05       	cpc	r25, r1
  ec:	21 f4       	brne	.+8      	; 0xf6 <__vector_16+0x4e>
			over_flow=0; //resetting overflow counter
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			} 
		
	}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
