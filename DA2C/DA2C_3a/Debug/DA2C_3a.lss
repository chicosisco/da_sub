
DA2C_3a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000180  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a3  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000242  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>
int over_flow=0;

int main()
{
	DDRB |=0x10;   //make PB4 an output
  90:	24 9a       	sbi	0x04, 4	; 4
	OCR0A = 128;   // compare register value
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	87 bd       	out	0x27, r24	; 39
	TCCR0B |=(1<<CS02);    // prescaler = 256
  96:	85 b5       	in	r24, 0x25	; 37
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	85 bd       	out	0x25, r24	; 37
	TCCR0A |=(1<<WGM01);   // CTC mode
  9c:	84 b5       	in	r24, 0x24	; 36
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<OCIE0A);  // enable Timer 0 compare match interrupt
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();      // enable global interrupt
  a8:	78 94       	sei
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x1a>

000000ac <__vector_14>:
}

// every time there's a match with the comparator register
// it jumps into this comparator interrupt
ISR (TIMER0_COMPA_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	
		//wait for the overflow event
		while ((TIFR0 & 0X02)==0);
  ba:	a9 9b       	sbis	0x15, 1	; 21
  bc:	fe cf       	rjmp	.-4      	; 0xba <__vector_14+0xe>
		TCNT0=0X0;  //resetting counter to zero
  be:	16 bc       	out	0x26, r1	; 38
		TIFR0=0X02;  // reset the overflow flag
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	85 bb       	out	0x15, r24	; 21
		over_flow++;  //increasing overflow counter
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		// if overflow is equal to 71 cycles turn on LED on PB4	
		if (over_flow>=71){
  d6:	87 34       	cpi	r24, 0x47	; 71
  d8:	91 05       	cpc	r25, r1
  da:	14 f0       	brlt	.+4      	; 0xe0 <__vector_14+0x34>
		PORTB = (0<<DDB4);
  dc:	15 b8       	out	0x05, r1	; 5
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_14+0x38>
		}
		else 
		PORTB = (1<<DDB4);  // or turn off LED on PB4
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	85 b9       	out	0x05, r24	; 5
		
		if (over_flow==175) {
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ec:	8f 3a       	cpi	r24, 0xAF	; 175
  ee:	91 05       	cpc	r25, r1
  f0:	21 f4       	brne	.+8      	; 0xfa <__vector_14+0x4e>
			over_flow=0; //resetting overflow counter
  f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			} 
		}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
