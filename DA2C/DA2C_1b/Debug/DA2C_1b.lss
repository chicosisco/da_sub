
DA2C_1b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000160  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068e  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024a  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000346  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int over_flow=0;

int main(void)
{
	
	DDRC &= (0<<2);
  90:	87 b1       	in	r24, 0x07	; 7
  92:	17 b8       	out	0x07, r1	; 7
	PORTC |=(1<<2); //enable pull-up
  94:	42 9a       	sbi	0x08, 2	; 8
	
    DDRB |= (1<<DDB4); // PB4 as output
  96:	24 9a       	sbi	0x04, 4	; 4
	PORTB |=(1<<DDB4); // Set PB2 high to keep LED off
  98:	2c 9a       	sbi	0x05, 4	; 5
	                   // as the starting position
	TCCR0A = 0; // normal operation.
  9a:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0;   //start timer/counter
  9c:	16 bc       	out	0x26, r1	; 38
	
	TCCR0B |=(1<<CS02)|(1<<CS00);  // setting prescaler to 1024
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37
			 while (1) 
			{
				//wait for the overflow event
				while ((TIFR0 & 0X01)==0);
				TCNT0=0X00;  //resetting counter to zero
				TIFR0=0X01;  // reset the overflow flag
  a4:	21 e0       	ldi	r18, 0x01	; 1
				over_flow++;  //increasing overflow counter
		
				// if overflow is less than or equal to 1 cycle the LED on PB4
				// turns off and stays off once it breaks
				if (over_flow<=1){
				PORTB = (1<<DDB4);
  a6:	30 e1       	ldi	r19, 0x10	; 16

	while (1) 
   {
	
			  
		if (!(PINC & (1<<PINC1))) //checking if pinc is high and complement
  a8:	31 99       	sbic	0x06, 1	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x18>
		{
			 while (1) 
			{
				//wait for the overflow event
				while ((TIFR0 & 0X01)==0);
  ac:	a8 9b       	sbis	0x15, 0	; 21
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x1c>
				TCNT0=0X00;  //resetting counter to zero
  b0:	16 bc       	out	0x26, r1	; 38
				TIFR0=0X01;  // reset the overflow flag
  b2:	25 bb       	out	0x15, r18	; 21
				
				over_flow++;  //increasing overflow counter
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
				// if overflow is less than or equal to 1 cycle the LED on PB4
				// turns off and stays off once it breaks
				if (over_flow<=1){
  c6:	02 97       	sbiw	r24, 0x02	; 2
  c8:	14 f4       	brge	.+4      	; 0xce <main+0x3e>
				PORTB = (1<<DDB4);
  ca:	35 b9       	out	0x05, r19	; 5
				break; 
  cc:	ed cf       	rjmp	.-38     	; 0xa8 <main+0x18>
				}
				
				else{ 
				PORTB = (0<<DDB4);  // or turn off LED on PB4
  ce:	15 b8       	out	0x05, r1	; 5
				//break; 
				}
				if (over_flow==76) {
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d8:	8c 34       	cpi	r24, 0x4C	; 76
  da:	91 05       	cpc	r25, r1
  dc:	39 f7       	brne	.-50     	; 0xac <main+0x1c>
					over_flow=0; //resetting overflow counter
  de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  e6:	e2 cf       	rjmp	.-60     	; 0xac <main+0x1c>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
