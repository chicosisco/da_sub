
DA4A_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000793  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000696  00000000  00000000  000009df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e1  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
}

// funtion to initilize ADC set up
void adc_init(void)
{
	ADCSRA |= ((1<<ADEN)|(1<<ADSC)|(0<<ADPS2)|(0<<ADPS1)|(1<<ADPS0));
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 6c       	ori	r24, 0xC1	; 193
  98:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <main>:

int main(void)
{
	
	
	PORTC |=(1<<2);   //enable pull-up
  a6:	42 9a       	sbi	0x08, 2	; 8
	DDRD |=(1<<DDD6)|(1<<DDD5); // PD5, PD6 as outputs
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 66       	ori	r24, 0x60	; 96
  ac:	8a b9       	out	0x0a, r24	; 10
	
	OCR0A = 250;  // setting counter top=250
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	87 bd       	out	0x27, r24	; 39
    // Timer/counter control register is set as follows: 
	// clear OC0A on compare match
	// clear OC0B on compare match
	// mode=7, Fast PWM
	// prescaler = 256
	TCCR0A |= (1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(1<<WGM00);
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	83 6a       	ori	r24, 0xA3	; 163
  b6:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1<<CS01);
	TCCR0B |= (1<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00);
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	8c 60       	ori	r24, 0x0C	; 12
  bc:	85 bd       	out	0x25, r24	; 37
			{
				_delay_ms(100);
				adc_init();    // initialize ADC set up
				
				{			//clockwise rotation
					OCR0B = ADC;    // adc values read from pot are being sent to 
  be:	0f 2e       	mov	r0, r31
  c0:	f8 e7       	ldi	r31, 0x78	; 120
  c2:	ef 2e       	mov	r14, r31
  c4:	f1 2c       	mov	r15, r1
  c6:	f0 2d       	mov	r31, r0
									// the compare register
									
					DDRD = 0xFF;    //setting all D as outputs
  c8:	1f ef       	ldi	r17, 0xFF	; 255
					PORTD |= (1 <<DDD5);  
					 motor=1; // setting motor to 1 to get out of while loop
  ca:	c1 e0       	ldi	r28, 0x01	; 1
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	17 c0       	rjmp	.+46     	; 0xfe <main+0x58>
    /* Replace with your application code */
    while (1) 
    {
		while (!motor)    // while motor is off the next follows
		{
			if(!SW)   // if PC2 is high or push button was pressed down
  d0:	32 99       	sbic	0x06, 2	; 6
  d2:	15 c0       	rjmp	.+42     	; 0xfe <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	81 ee       	ldi	r24, 0xE1	; 225
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x3e>
  e4:	00 00       	nop
			{
				_delay_ms(100);
				adc_init();    // initialize ADC set up
  e6:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
				
				{			//clockwise rotation
					OCR0B = ADC;    // adc values read from pot are being sent to 
  ea:	f7 01       	movw	r30, r14
  ec:	80 81       	ld	r24, Z
  ee:	91 81       	ldd	r25, Z+1	; 0x01
  f0:	88 bd       	out	0x28, r24	; 40
									// the compare register
									
					DDRD = 0xFF;    //setting all D as outputs
  f2:	1a b9       	out	0x0a, r17	; 10
					PORTD |= (1 <<DDD5);  
  f4:	5d 9a       	sbi	0x0b, 5	; 11
					 motor=1; // setting motor to 1 to get out of while loop
  f6:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <_edata+0x1>
  fa:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
	//TCCR0B |= (1<<CS01);
	TCCR0B |= (1<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00);
    /* Replace with your application code */
    while (1) 
    {
		while (!motor)    // while motor is off the next follows
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 102:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 106:	89 2b       	or	r24, r25
 108:	19 f3       	breq	.-58     	; 0xd0 <main+0x2a>
 10a:	11 c0       	rjmp	.+34     	; 0x12e <main+0x88>
			}
		}
		//motor on
		while (motor)
		{
			if(!SW)   
 10c:	32 99       	sbic	0x06, 2	; 6
 10e:	13 c0       	rjmp	.+38     	; 0x136 <main+0x90>
 110:	ff ef       	ldi	r31, 0xFF	; 255
 112:	21 ee       	ldi	r18, 0xE1	; 225
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	f1 50       	subi	r31, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x70>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x7a>
 120:	00 00       	nop
	         {
			   _delay_ms(100);
			   //clockwise rotation
			   // turning motor off
				PORTD &= ~(1<<DDD5); 
 122:	5d 98       	cbi	0x0b, 5	; 11
				DDRD = 0;
 124:	1a b8       	out	0x0a, r1	; 10
				motor=0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
					 motor=1; // setting motor to 1 to get out of while loop
				}
			}
		}
		//motor on
		while (motor)
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	49 f7       	brne	.-46     	; 0x10c <main+0x66>
 13a:	e1 cf       	rjmp	.-62     	; 0xfe <main+0x58>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
