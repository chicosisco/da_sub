
DA3B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000005de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000785  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030a  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000371  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000101  00000000  00000000  00001c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 b3 02 	jmp	0x566	; 0x566 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:


// timer_0 overflow interrupt
////////////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	while (!(TIFR0 & 0X01)==0);
  9e:	a8 99       	sbic	0x15, 0	; 21
  a0:	fe cf       	rjmp	.-4      	; 0x9e <__vector_16+0xe>
	TCNT0=0X00;  //resetting counter to zero
  a2:	16 bc       	out	0x26, r1	; 38
	TIFR0=0X01;  // reset the overflow flag
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	85 bb       	out	0x15, r24	; 21
	over_flow++;  //increasing overflow counter
  a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
 }
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <usart_init>:

///////////////////////////////////////////////////////////////////////////////////////////////////////

void usart_init (void)
{
	UCSR0B = (1<<TXEN0);
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<< UCSZ01)|(1<<UCSZ00);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = F_CPU/16/BAUD_RATE-1;
  d4:	87 e6       	ldi	r24, 0x67	; 103
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  da:	08 95       	ret

000000dc <usart_send>:
}

void usart_send (unsigned char ch)
{
	while (! (UCSR0A & (1<<UDRE0))); 	//wait until UDR0 is empty
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <usart_send+0x4>
	UDR0 = ch;							//transmit ch
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ea:	08 95       	ret

000000ec <main>:
void usart_init ();
void usart_send (unsigned char ch);

int main (void)
{
	usart_init ();
  ec:	0e 94 64 00 	call	0xc8	; 0xc8 <usart_init>
	
   /** Setup and enable ADC **/
   ADMUX = (0<<REFS1)|    // Reference Selection Bits
  f0:	85 e4       	ldi	r24, 0x45	; 69
  f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
   (1<<REFS0)|    // AVcc - external cap at AREF
   (0<<ADLAR)|    // ADC Left Adjust Result
   (1<<MUX2)|     // Analog Channel Selection Bits
   (0<<MUX1)|     // ADC5 (PC5 PIN27)
   (1<<MUX0);
   ADCSRA = (1<<ADEN)|    // ADC ENable
  f6:	85 e8       	ldi	r24, 0x85	; 133
  f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
   (1<<ADPS0);
	
	
	//////////////////////////////////////////////////////////////////////////////////
	 //DDRB |=(1<<DDB4);  // setting PB1 as output
	 TIMSK0 |= (1<<TOIE0);
  fc:	ee e6       	ldi	r30, 0x6E	; 110
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
	 TCNT0 = 0;                // setting initial value for counter
 106:	16 bc       	out	0x26, r1	; 38
	 sei();                    // enable global interrupts
 108:	78 94       	sei
	 TCCR0B |=(1<<CS02)|(1<<CS00);  // setting prescaler to 1024
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	85 60       	ori	r24, 0x05	; 5
 10e:	85 bd       	out	0x25, r24	; 37
	//////////////////////////////////////////////////////////////////////////////////
	
	while (1)
	{
		 	
		ADCSRA|=(1<<ADSC);	//start conversion
 110:	ca e7       	ldi	r28, 0x7A	; 122
 112:	d0 e0       	ldi	r29, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		
		ADCSRA |= (1<<ADIF);
      if (over_flow==61)          // when TCNT0 overflows 61 times, then the information is updated
	   {
		int a = ADCL;
 114:	0f 2e       	mov	r0, r31
 116:	f8 e7       	ldi	r31, 0x78	; 120
 118:	af 2e       	mov	r10, r31
 11a:	b1 2c       	mov	r11, r1
 11c:	f0 2d       	mov	r31, r0
		a = a | (ADCH<<8);
 11e:	09 e7       	ldi	r16, 0x79	; 121
 120:	10 e0       	ldi	r17, 0x00	; 0
		a = (a/1024.0) * 5000/10;
	    usart_send((a/100)+'0');
 122:	0f 2e       	mov	r0, r31
 124:	f4 e6       	ldi	r31, 0x64	; 100
 126:	cf 2e       	mov	r12, r31
 128:	d1 2c       	mov	r13, r1
 12a:	f0 2d       	mov	r31, r0
	    a = a % 100;
		usart_send((a/10)+'0');
 12c:	0f 2e       	mov	r0, r31
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	ef 2e       	mov	r14, r31
 132:	f1 2c       	mov	r15, r1
 134:	f0 2d       	mov	r31, r0
	//////////////////////////////////////////////////////////////////////////////////
	
	while (1)
	{
		 	
		ADCSRA|=(1<<ADSC);	//start conversion
 136:	88 81       	ld	r24, Y
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	88 83       	st	Y, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 13c:	88 81       	ld	r24, Y
 13e:	84 ff       	sbrs	r24, 4
 140:	fd cf       	rjmp	.-6      	; 0x13c <main+0x50>
		
		ADCSRA |= (1<<ADIF);
 142:	88 81       	ld	r24, Y
 144:	80 61       	ori	r24, 0x10	; 16
 146:	88 83       	st	Y, r24
      if (over_flow==61)          // when TCNT0 overflows 61 times, then the information is updated
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 150:	cd 97       	sbiw	r24, 0x3d	; 61
 152:	89 f7       	brne	.-30     	; 0x136 <main+0x4a>
	   {
		int a = ADCL;
 154:	f5 01       	movw	r30, r10
 156:	60 81       	ld	r22, Z
		a = a | (ADCH<<8);
 158:	f8 01       	movw	r30, r16
 15a:	80 81       	ld	r24, Z
		a = (a/1024.0) * 5000/10;
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	78 2b       	or	r23, r24
 160:	07 2e       	mov	r0, r23
 162:	00 0c       	add	r0, r0
 164:	88 0b       	sbc	r24, r24
 166:	99 0b       	sbc	r25, r25
 168:	0e 94 92 01 	call	0x324	; 0x324 <__floatsisf>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e8       	ldi	r20, 0x80	; 128
 172:	5a e3       	ldi	r21, 0x3A	; 58
 174:	0e 94 1e 02 	call	0x43c	; 0x43c <__mulsf3>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e4       	ldi	r19, 0x40	; 64
 17c:	4c e9       	ldi	r20, 0x9C	; 156
 17e:	55 e4       	ldi	r21, 0x45	; 69
 180:	0e 94 1e 02 	call	0x43c	; 0x43c <__mulsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__divsf3>
 190:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__fixsfsi>
	    usart_send((a/100)+'0');
 194:	cb 01       	movw	r24, r22
 196:	b6 01       	movw	r22, r12
 198:	0e 94 8b 02 	call	0x516	; 0x516 <__divmodhi4>
 19c:	4c 01       	movw	r8, r24
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	86 0f       	add	r24, r22
 1a2:	0e 94 6e 00 	call	0xdc	; 0xdc <usart_send>
	    a = a % 100;
		usart_send((a/10)+'0');
 1a6:	c4 01       	movw	r24, r8
 1a8:	b7 01       	movw	r22, r14
 1aa:	0e 94 8b 02 	call	0x516	; 0x516 <__divmodhi4>
 1ae:	98 2e       	mov	r9, r24
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	86 0f       	add	r24, r22
 1b4:	0e 94 6e 00 	call	0xdc	; 0xdc <usart_send>
		a = a % 10;
		usart_send((a)+'0');
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	89 0d       	add	r24, r9
 1bc:	0e 94 6e 00 	call	0xdc	; 0xdc <usart_send>
		usart_send('\r');
 1c0:	8d e0       	ldi	r24, 0x0D	; 13
 1c2:	0e 94 6e 00 	call	0xdc	; 0xdc <usart_send>
		over_flow=0;
 1c6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1ce:	b3 cf       	rjmp	.-154    	; 0x136 <main+0x4a>

000001d0 <__divsf3>:
 1d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__divsf3x>
 1d4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__fp_round>
 1d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fp_pscB>
 1dc:	58 f0       	brcs	.+22     	; 0x1f4 <__divsf3+0x24>
 1de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__fp_pscA>
 1e2:	40 f0       	brcs	.+16     	; 0x1f4 <__divsf3+0x24>
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <__divsf3+0x20>
 1e6:	5f 3f       	cpi	r21, 0xFF	; 255
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <__divsf3+0x24>
 1ea:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_inf>
 1ee:	51 11       	cpse	r21, r1
 1f0:	0c 94 18 02 	jmp	0x430	; 0x430 <__fp_szero>
 1f4:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_nan>

000001f8 <__divsf3x>:
 1f8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__fp_split3>
 1fc:	68 f3       	brcs	.-38     	; 0x1d8 <__divsf3+0x8>

000001fe <__divsf3_pse>:
 1fe:	99 23       	and	r25, r25
 200:	b1 f3       	breq	.-20     	; 0x1ee <__divsf3+0x1e>
 202:	55 23       	and	r21, r21
 204:	91 f3       	breq	.-28     	; 0x1ea <__divsf3+0x1a>
 206:	95 1b       	sub	r25, r21
 208:	55 0b       	sbc	r21, r21
 20a:	bb 27       	eor	r27, r27
 20c:	aa 27       	eor	r26, r26
 20e:	62 17       	cp	r22, r18
 210:	73 07       	cpc	r23, r19
 212:	84 07       	cpc	r24, r20
 214:	38 f0       	brcs	.+14     	; 0x224 <__divsf3_pse+0x26>
 216:	9f 5f       	subi	r25, 0xFF	; 255
 218:	5f 4f       	sbci	r21, 0xFF	; 255
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	44 1f       	adc	r20, r20
 220:	aa 1f       	adc	r26, r26
 222:	a9 f3       	breq	.-22     	; 0x20e <__divsf3_pse+0x10>
 224:	35 d0       	rcall	.+106    	; 0x290 <__divsf3_pse+0x92>
 226:	0e 2e       	mov	r0, r30
 228:	3a f0       	brmi	.+14     	; 0x238 <__divsf3_pse+0x3a>
 22a:	e0 e8       	ldi	r30, 0x80	; 128
 22c:	32 d0       	rcall	.+100    	; 0x292 <__divsf3_pse+0x94>
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	50 40       	sbci	r21, 0x00	; 0
 232:	e6 95       	lsr	r30
 234:	00 1c       	adc	r0, r0
 236:	ca f7       	brpl	.-14     	; 0x22a <__divsf3_pse+0x2c>
 238:	2b d0       	rcall	.+86     	; 0x290 <__divsf3_pse+0x92>
 23a:	fe 2f       	mov	r31, r30
 23c:	29 d0       	rcall	.+82     	; 0x290 <__divsf3_pse+0x92>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	88 1f       	adc	r24, r24
 244:	bb 1f       	adc	r27, r27
 246:	26 17       	cp	r18, r22
 248:	37 07       	cpc	r19, r23
 24a:	48 07       	cpc	r20, r24
 24c:	ab 07       	cpc	r26, r27
 24e:	b0 e8       	ldi	r27, 0x80	; 128
 250:	09 f0       	breq	.+2      	; 0x254 <__divsf3_pse+0x56>
 252:	bb 0b       	sbc	r27, r27
 254:	80 2d       	mov	r24, r0
 256:	bf 01       	movw	r22, r30
 258:	ff 27       	eor	r31, r31
 25a:	93 58       	subi	r25, 0x83	; 131
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	3a f0       	brmi	.+14     	; 0x26e <__divsf3_pse+0x70>
 260:	9e 3f       	cpi	r25, 0xFE	; 254
 262:	51 05       	cpc	r21, r1
 264:	78 f0       	brcs	.+30     	; 0x284 <__divsf3_pse+0x86>
 266:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_inf>
 26a:	0c 94 18 02 	jmp	0x430	; 0x430 <__fp_szero>
 26e:	5f 3f       	cpi	r21, 0xFF	; 255
 270:	e4 f3       	brlt	.-8      	; 0x26a <__divsf3_pse+0x6c>
 272:	98 3e       	cpi	r25, 0xE8	; 232
 274:	d4 f3       	brlt	.-12     	; 0x26a <__divsf3_pse+0x6c>
 276:	86 95       	lsr	r24
 278:	77 95       	ror	r23
 27a:	67 95       	ror	r22
 27c:	b7 95       	ror	r27
 27e:	f7 95       	ror	r31
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c9 f7       	brne	.-14     	; 0x276 <__divsf3_pse+0x78>
 284:	88 0f       	add	r24, r24
 286:	91 1d       	adc	r25, r1
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	97 f9       	bld	r25, 7
 28e:	08 95       	ret
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	88 1f       	adc	r24, r24
 298:	bb 1f       	adc	r27, r27
 29a:	62 17       	cp	r22, r18
 29c:	73 07       	cpc	r23, r19
 29e:	84 07       	cpc	r24, r20
 2a0:	ba 07       	cpc	r27, r26
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__divsf3_pse+0xae>
 2a4:	62 1b       	sub	r22, r18
 2a6:	73 0b       	sbc	r23, r19
 2a8:	84 0b       	sbc	r24, r20
 2aa:	ba 0b       	sbc	r27, r26
 2ac:	ee 1f       	adc	r30, r30
 2ae:	88 f7       	brcc	.-30     	; 0x292 <__divsf3_pse+0x94>
 2b0:	e0 95       	com	r30
 2b2:	08 95       	ret

000002b4 <__fixsfsi>:
 2b4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__fixunssfsi>
 2b8:	68 94       	set
 2ba:	b1 11       	cpse	r27, r1
 2bc:	0c 94 18 02 	jmp	0x430	; 0x430 <__fp_szero>
 2c0:	08 95       	ret

000002c2 <__fixunssfsi>:
 2c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fp_splitA>
 2c6:	88 f0       	brcs	.+34     	; 0x2ea <__fixunssfsi+0x28>
 2c8:	9f 57       	subi	r25, 0x7F	; 127
 2ca:	98 f0       	brcs	.+38     	; 0x2f2 <__fixunssfsi+0x30>
 2cc:	b9 2f       	mov	r27, r25
 2ce:	99 27       	eor	r25, r25
 2d0:	b7 51       	subi	r27, 0x17	; 23
 2d2:	b0 f0       	brcs	.+44     	; 0x300 <__fixunssfsi+0x3e>
 2d4:	e1 f0       	breq	.+56     	; 0x30e <__fixunssfsi+0x4c>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	88 1f       	adc	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	1a f0       	brmi	.+6      	; 0x2e6 <__fixunssfsi+0x24>
 2e0:	ba 95       	dec	r27
 2e2:	c9 f7       	brne	.-14     	; 0x2d6 <__fixunssfsi+0x14>
 2e4:	14 c0       	rjmp	.+40     	; 0x30e <__fixunssfsi+0x4c>
 2e6:	b1 30       	cpi	r27, 0x01	; 1
 2e8:	91 f0       	breq	.+36     	; 0x30e <__fixunssfsi+0x4c>
 2ea:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_zero>
 2ee:	b1 e0       	ldi	r27, 0x01	; 1
 2f0:	08 95       	ret
 2f2:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_zero>
 2f6:	67 2f       	mov	r22, r23
 2f8:	78 2f       	mov	r23, r24
 2fa:	88 27       	eor	r24, r24
 2fc:	b8 5f       	subi	r27, 0xF8	; 248
 2fe:	39 f0       	breq	.+14     	; 0x30e <__fixunssfsi+0x4c>
 300:	b9 3f       	cpi	r27, 0xF9	; 249
 302:	cc f3       	brlt	.-14     	; 0x2f6 <__fixunssfsi+0x34>
 304:	86 95       	lsr	r24
 306:	77 95       	ror	r23
 308:	67 95       	ror	r22
 30a:	b3 95       	inc	r27
 30c:	d9 f7       	brne	.-10     	; 0x304 <__fixunssfsi+0x42>
 30e:	3e f4       	brtc	.+14     	; 0x31e <__fixunssfsi+0x5c>
 310:	90 95       	com	r25
 312:	80 95       	com	r24
 314:	70 95       	com	r23
 316:	61 95       	neg	r22
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	8f 4f       	sbci	r24, 0xFF	; 255
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	08 95       	ret

00000320 <__floatunsisf>:
 320:	e8 94       	clt
 322:	09 c0       	rjmp	.+18     	; 0x336 <__floatsisf+0x12>

00000324 <__floatsisf>:
 324:	97 fb       	bst	r25, 7
 326:	3e f4       	brtc	.+14     	; 0x336 <__floatsisf+0x12>
 328:	90 95       	com	r25
 32a:	80 95       	com	r24
 32c:	70 95       	com	r23
 32e:	61 95       	neg	r22
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	8f 4f       	sbci	r24, 0xFF	; 255
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	99 23       	and	r25, r25
 338:	a9 f0       	breq	.+42     	; 0x364 <__floatsisf+0x40>
 33a:	f9 2f       	mov	r31, r25
 33c:	96 e9       	ldi	r25, 0x96	; 150
 33e:	bb 27       	eor	r27, r27
 340:	93 95       	inc	r25
 342:	f6 95       	lsr	r31
 344:	87 95       	ror	r24
 346:	77 95       	ror	r23
 348:	67 95       	ror	r22
 34a:	b7 95       	ror	r27
 34c:	f1 11       	cpse	r31, r1
 34e:	f8 cf       	rjmp	.-16     	; 0x340 <__floatsisf+0x1c>
 350:	fa f4       	brpl	.+62     	; 0x390 <__floatsisf+0x6c>
 352:	bb 0f       	add	r27, r27
 354:	11 f4       	brne	.+4      	; 0x35a <__floatsisf+0x36>
 356:	60 ff       	sbrs	r22, 0
 358:	1b c0       	rjmp	.+54     	; 0x390 <__floatsisf+0x6c>
 35a:	6f 5f       	subi	r22, 0xFF	; 255
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
 35e:	8f 4f       	sbci	r24, 0xFF	; 255
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	16 c0       	rjmp	.+44     	; 0x390 <__floatsisf+0x6c>
 364:	88 23       	and	r24, r24
 366:	11 f0       	breq	.+4      	; 0x36c <__floatsisf+0x48>
 368:	96 e9       	ldi	r25, 0x96	; 150
 36a:	11 c0       	rjmp	.+34     	; 0x38e <__floatsisf+0x6a>
 36c:	77 23       	and	r23, r23
 36e:	21 f0       	breq	.+8      	; 0x378 <__floatsisf+0x54>
 370:	9e e8       	ldi	r25, 0x8E	; 142
 372:	87 2f       	mov	r24, r23
 374:	76 2f       	mov	r23, r22
 376:	05 c0       	rjmp	.+10     	; 0x382 <__floatsisf+0x5e>
 378:	66 23       	and	r22, r22
 37a:	71 f0       	breq	.+28     	; 0x398 <__floatsisf+0x74>
 37c:	96 e8       	ldi	r25, 0x86	; 134
 37e:	86 2f       	mov	r24, r22
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	2a f0       	brmi	.+10     	; 0x390 <__floatsisf+0x6c>
 386:	9a 95       	dec	r25
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	da f7       	brpl	.-10     	; 0x386 <__floatsisf+0x62>
 390:	88 0f       	add	r24, r24
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	97 f9       	bld	r25, 7
 398:	08 95       	ret

0000039a <__fp_inf>:
 39a:	97 f9       	bld	r25, 7
 39c:	9f 67       	ori	r25, 0x7F	; 127
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	08 95       	ret

000003a6 <__fp_nan>:
 3a6:	9f ef       	ldi	r25, 0xFF	; 255
 3a8:	80 ec       	ldi	r24, 0xC0	; 192
 3aa:	08 95       	ret

000003ac <__fp_pscA>:
 3ac:	00 24       	eor	r0, r0
 3ae:	0a 94       	dec	r0
 3b0:	16 16       	cp	r1, r22
 3b2:	17 06       	cpc	r1, r23
 3b4:	18 06       	cpc	r1, r24
 3b6:	09 06       	cpc	r0, r25
 3b8:	08 95       	ret

000003ba <__fp_pscB>:
 3ba:	00 24       	eor	r0, r0
 3bc:	0a 94       	dec	r0
 3be:	12 16       	cp	r1, r18
 3c0:	13 06       	cpc	r1, r19
 3c2:	14 06       	cpc	r1, r20
 3c4:	05 06       	cpc	r0, r21
 3c6:	08 95       	ret

000003c8 <__fp_round>:
 3c8:	09 2e       	mov	r0, r25
 3ca:	03 94       	inc	r0
 3cc:	00 0c       	add	r0, r0
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__fp_round+0xc>
 3d0:	88 23       	and	r24, r24
 3d2:	52 f0       	brmi	.+20     	; 0x3e8 <__fp_round+0x20>
 3d4:	bb 0f       	add	r27, r27
 3d6:	40 f4       	brcc	.+16     	; 0x3e8 <__fp_round+0x20>
 3d8:	bf 2b       	or	r27, r31
 3da:	11 f4       	brne	.+4      	; 0x3e0 <__fp_round+0x18>
 3dc:	60 ff       	sbrs	r22, 0
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <__fp_round+0x20>
 3e0:	6f 5f       	subi	r22, 0xFF	; 255
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	8f 4f       	sbci	r24, 0xFF	; 255
 3e6:	9f 4f       	sbci	r25, 0xFF	; 255
 3e8:	08 95       	ret

000003ea <__fp_split3>:
 3ea:	57 fd       	sbrc	r21, 7
 3ec:	90 58       	subi	r25, 0x80	; 128
 3ee:	44 0f       	add	r20, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	59 f0       	breq	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f4:	5f 3f       	cpi	r21, 0xFF	; 255
 3f6:	71 f0       	breq	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f8:	47 95       	ror	r20

000003fa <__fp_splitA>:
 3fa:	88 0f       	add	r24, r24
 3fc:	97 fb       	bst	r25, 7
 3fe:	99 1f       	adc	r25, r25
 400:	61 f0       	breq	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 402:	9f 3f       	cpi	r25, 0xFF	; 255
 404:	79 f0       	breq	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 406:	87 95       	ror	r24
 408:	08 95       	ret
 40a:	12 16       	cp	r1, r18
 40c:	13 06       	cpc	r1, r19
 40e:	14 06       	cpc	r1, r20
 410:	55 1f       	adc	r21, r21
 412:	f2 cf       	rjmp	.-28     	; 0x3f8 <__fp_split3+0xe>
 414:	46 95       	lsr	r20
 416:	f1 df       	rcall	.-30     	; 0x3fa <__fp_splitA>
 418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41a:	16 16       	cp	r1, r22
 41c:	17 06       	cpc	r1, r23
 41e:	18 06       	cpc	r1, r24
 420:	99 1f       	adc	r25, r25
 422:	f1 cf       	rjmp	.-30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 424:	86 95       	lsr	r24
 426:	71 05       	cpc	r23, r1
 428:	61 05       	cpc	r22, r1
 42a:	08 94       	sec
 42c:	08 95       	ret

0000042e <__fp_zero>:
 42e:	e8 94       	clt

00000430 <__fp_szero>:
 430:	bb 27       	eor	r27, r27
 432:	66 27       	eor	r22, r22
 434:	77 27       	eor	r23, r23
 436:	cb 01       	movw	r24, r22
 438:	97 f9       	bld	r25, 7
 43a:	08 95       	ret

0000043c <__mulsf3>:
 43c:	0e 94 31 02 	call	0x462	; 0x462 <__mulsf3x>
 440:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__fp_round>
 444:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__fp_pscA>
 448:	38 f0       	brcs	.+14     	; 0x458 <__mulsf3+0x1c>
 44a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fp_pscB>
 44e:	20 f0       	brcs	.+8      	; 0x458 <__mulsf3+0x1c>
 450:	95 23       	and	r25, r21
 452:	11 f0       	breq	.+4      	; 0x458 <__mulsf3+0x1c>
 454:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_inf>
 458:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_nan>
 45c:	11 24       	eor	r1, r1
 45e:	0c 94 18 02 	jmp	0x430	; 0x430 <__fp_szero>

00000462 <__mulsf3x>:
 462:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__fp_split3>
 466:	70 f3       	brcs	.-36     	; 0x444 <__mulsf3+0x8>

00000468 <__mulsf3_pse>:
 468:	95 9f       	mul	r25, r21
 46a:	c1 f3       	breq	.-16     	; 0x45c <__mulsf3+0x20>
 46c:	95 0f       	add	r25, r21
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	55 1f       	adc	r21, r21
 472:	62 9f       	mul	r22, r18
 474:	f0 01       	movw	r30, r0
 476:	72 9f       	mul	r23, r18
 478:	bb 27       	eor	r27, r27
 47a:	f0 0d       	add	r31, r0
 47c:	b1 1d       	adc	r27, r1
 47e:	63 9f       	mul	r22, r19
 480:	aa 27       	eor	r26, r26
 482:	f0 0d       	add	r31, r0
 484:	b1 1d       	adc	r27, r1
 486:	aa 1f       	adc	r26, r26
 488:	64 9f       	mul	r22, r20
 48a:	66 27       	eor	r22, r22
 48c:	b0 0d       	add	r27, r0
 48e:	a1 1d       	adc	r26, r1
 490:	66 1f       	adc	r22, r22
 492:	82 9f       	mul	r24, r18
 494:	22 27       	eor	r18, r18
 496:	b0 0d       	add	r27, r0
 498:	a1 1d       	adc	r26, r1
 49a:	62 1f       	adc	r22, r18
 49c:	73 9f       	mul	r23, r19
 49e:	b0 0d       	add	r27, r0
 4a0:	a1 1d       	adc	r26, r1
 4a2:	62 1f       	adc	r22, r18
 4a4:	83 9f       	mul	r24, r19
 4a6:	a0 0d       	add	r26, r0
 4a8:	61 1d       	adc	r22, r1
 4aa:	22 1f       	adc	r18, r18
 4ac:	74 9f       	mul	r23, r20
 4ae:	33 27       	eor	r19, r19
 4b0:	a0 0d       	add	r26, r0
 4b2:	61 1d       	adc	r22, r1
 4b4:	23 1f       	adc	r18, r19
 4b6:	84 9f       	mul	r24, r20
 4b8:	60 0d       	add	r22, r0
 4ba:	21 1d       	adc	r18, r1
 4bc:	82 2f       	mov	r24, r18
 4be:	76 2f       	mov	r23, r22
 4c0:	6a 2f       	mov	r22, r26
 4c2:	11 24       	eor	r1, r1
 4c4:	9f 57       	subi	r25, 0x7F	; 127
 4c6:	50 40       	sbci	r21, 0x00	; 0
 4c8:	9a f0       	brmi	.+38     	; 0x4f0 <__mulsf3_pse+0x88>
 4ca:	f1 f0       	breq	.+60     	; 0x508 <__mulsf3_pse+0xa0>
 4cc:	88 23       	and	r24, r24
 4ce:	4a f0       	brmi	.+18     	; 0x4e2 <__mulsf3_pse+0x7a>
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	bb 1f       	adc	r27, r27
 4d6:	66 1f       	adc	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	91 50       	subi	r25, 0x01	; 1
 4de:	50 40       	sbci	r21, 0x00	; 0
 4e0:	a9 f7       	brne	.-22     	; 0x4cc <__mulsf3_pse+0x64>
 4e2:	9e 3f       	cpi	r25, 0xFE	; 254
 4e4:	51 05       	cpc	r21, r1
 4e6:	80 f0       	brcs	.+32     	; 0x508 <__mulsf3_pse+0xa0>
 4e8:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_inf>
 4ec:	0c 94 18 02 	jmp	0x430	; 0x430 <__fp_szero>
 4f0:	5f 3f       	cpi	r21, 0xFF	; 255
 4f2:	e4 f3       	brlt	.-8      	; 0x4ec <__mulsf3_pse+0x84>
 4f4:	98 3e       	cpi	r25, 0xE8	; 232
 4f6:	d4 f3       	brlt	.-12     	; 0x4ec <__mulsf3_pse+0x84>
 4f8:	86 95       	lsr	r24
 4fa:	77 95       	ror	r23
 4fc:	67 95       	ror	r22
 4fe:	b7 95       	ror	r27
 500:	f7 95       	ror	r31
 502:	e7 95       	ror	r30
 504:	9f 5f       	subi	r25, 0xFF	; 255
 506:	c1 f7       	brne	.-16     	; 0x4f8 <__mulsf3_pse+0x90>
 508:	fe 2b       	or	r31, r30
 50a:	88 0f       	add	r24, r24
 50c:	91 1d       	adc	r25, r1
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	97 f9       	bld	r25, 7
 514:	08 95       	ret

00000516 <__divmodhi4>:
 516:	97 fb       	bst	r25, 7
 518:	07 2e       	mov	r0, r23
 51a:	16 f4       	brtc	.+4      	; 0x520 <__divmodhi4+0xa>
 51c:	00 94       	com	r0
 51e:	07 d0       	rcall	.+14     	; 0x52e <__divmodhi4_neg1>
 520:	77 fd       	sbrc	r23, 7
 522:	09 d0       	rcall	.+18     	; 0x536 <__divmodhi4_neg2>
 524:	0e 94 9f 02 	call	0x53e	; 0x53e <__udivmodhi4>
 528:	07 fc       	sbrc	r0, 7
 52a:	05 d0       	rcall	.+10     	; 0x536 <__divmodhi4_neg2>
 52c:	3e f4       	brtc	.+14     	; 0x53c <__divmodhi4_exit>

0000052e <__divmodhi4_neg1>:
 52e:	90 95       	com	r25
 530:	81 95       	neg	r24
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	08 95       	ret

00000536 <__divmodhi4_neg2>:
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255

0000053c <__divmodhi4_exit>:
 53c:	08 95       	ret

0000053e <__udivmodhi4>:
 53e:	aa 1b       	sub	r26, r26
 540:	bb 1b       	sub	r27, r27
 542:	51 e1       	ldi	r21, 0x11	; 17
 544:	07 c0       	rjmp	.+14     	; 0x554 <__udivmodhi4_ep>

00000546 <__udivmodhi4_loop>:
 546:	aa 1f       	adc	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	a6 17       	cp	r26, r22
 54c:	b7 07       	cpc	r27, r23
 54e:	10 f0       	brcs	.+4      	; 0x554 <__udivmodhi4_ep>
 550:	a6 1b       	sub	r26, r22
 552:	b7 0b       	sbc	r27, r23

00000554 <__udivmodhi4_ep>:
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	5a 95       	dec	r21
 55a:	a9 f7       	brne	.-22     	; 0x546 <__udivmodhi4_loop>
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	bc 01       	movw	r22, r24
 562:	cd 01       	movw	r24, r26
 564:	08 95       	ret

00000566 <_exit>:
 566:	f8 94       	cli

00000568 <__stop_program>:
 568:	ff cf       	rjmp	.-2      	; 0x568 <__stop_program>
